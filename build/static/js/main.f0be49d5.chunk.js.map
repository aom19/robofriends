{"version":3,"sources":["serviceWorker.js","components/Card.js","components/card_list.js","components/search_box.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCFSC,EAdF,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAOC,EAAe,EAAfA,MAAMC,EAAS,EAATA,GAE3B,OAEC,yBAAKC,UAAU,oDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACC,gCAAMF,EAAN,KACA,+BAAKC,EAAL,QCaWK,EAnBC,SAAC,GAAe,IAAbC,EAAY,EAAZA,OAClB,OACE,6BAECA,EAAOC,KAAI,SAACC,EAAOC,GAClB,OACC,kBAAC,EAAD,CACCC,IAAMD,EACNR,GAAKK,EAAOG,GAAGR,GACfF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCATW,EAZE,SAAC,GAAmC,EAAjCC,YAAkC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,yBAAKX,UAAU,OACd,2BACCA,UAAU,uCACVY,KAAK,SACLC,YAAa,cACbC,SAAaH,MCCFI,EARA,SAACC,GACf,OACE,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAC/DJ,EAAMK,WC2CAC,E,YAzCd,aAAc,IAAD,8BACZ,+CAcDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAd1C,EAAKC,MAAM,CACVxB,OAAS,GACTM,YAAa,IAJF,E,iFASO,IAAD,OAClBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACrB,OAAS6B,S,+BAQ9B,IAAD,OACFC,EAAiBC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAhC,GAC/C,OAAOA,EAAOP,KAAKwC,cAAcC,SAAS,EAAKV,MAAMlB,YAAY2B,kBAElE,OAAgC,IAA7BF,KAAKP,MAAMxB,OAAOmC,OACb,yCAGN,yBAAKvC,UAAY,MAChB,wBAAIA,UAAU,wCAAd,gBACA,wBAAIA,UAAU,yCAAd,qBAAwE,sCAAxE,QACA,kBAAC,EAAD,CAAWW,aAAcwB,KAAKZ,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUnB,OAAQ8B,U,GAlCNM,aCClBC,IAASC,OACP,kBAAC,EAAD,MAGCC,SAASC,eAAe,SNsHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,iB","file":"static/js/main.f0be49d5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = ({name , email,id }) => {\n\t\n\treturn (\n\n\t\t<div className=\"tc bg-light-green dib brd3 ma2 grow bw2 shadow-4\">\n\t\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?400x100`} />\n\t\t\t<div>\n\t\t\t\t<h2> {name} </h2>\n\t\t\t\t<p> {email} </p>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card  from './Card'\n\n\nconst CardList =({ robots }) =>{\n\treturn (\n\t\t\t<div> \n\t\t\t{\n\t\t\t\trobots.map((user , i ) => { \n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\tkey= {i} \n\t\t\t\t\t\t\tid ={robots[i].id }  \n\t\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t    })\n\t\t\t}\n\t\t\t</div>\n\t);\n}\n\t\nexport default CardList;","import React from 'react';\n \nconst SearchBox =({ searchfield , searchChange }) => {\n\treturn (\n\t\t<div className=\"pa2\">\n\t\t\t<input \n\t\t\t\tclassName=\"pa2 br3 ba b--green bg-lightest-blue\"\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder =' search box'\n\t\t\t\tonChange = { searchChange }\n\t\t\t/>\n\t\t</div>\n\t);\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t <div style={{ overflow: 'scroll', border: '2px solid khaki', height: '800px'}}>\n      \t\t{props.children}\n    \t</div>\n\t);\n};\n\nexport default Scroll;"," import React,{ Component } from 'react';\n \nimport CardList from '../components/card_list';\nimport SearchBox from '../components/search_box';\nimport Scroll from '../components/Scroll';\n\nclass App extends Component  {\n\tconstructor(){\n\t\tsuper()\n\t\tthis.state={\n\t\t\trobots : [] ,\n\t\t\tsearchfield: ''\n\t\t}\n\t\t\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response =>response.json())\n\t\t.then(users => this.setState({robots : users}));\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value})\n\t}\n\n\n\trender() {\n\t\tconst filteredRobots = this.state.robots.filter(robots =>{\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n\t\t})\n\t\tif(this.state.robots.length === 0){\n\t\t\treturn <h1> Loading </h1>\n\t\t}else {\n\t\t\treturn (\n\t\t\t\t<div className = \"tc\">\n\t\t\t\t\t<h1 className=\"b dim  f1 f2-m f1-l fw2 black-90 mv3\"> RoboFriends</h1>\n\t\t\t\t\t<h2 className=\"f5 f4-m f3-l fw2 black-50 mt0 lh-copy\"> This is my first <em>React </em> app</h2>\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\t\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\n\nReactDOM.render(\n\t\t<App/>\n\n\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}